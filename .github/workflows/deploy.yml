name: Deploy HalalChain Marketplace

on:
  push:
    branches: [ main ]
    tags:
      - 'v*.*.*'
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x]

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        # Use npm ci for clean install, but fallback to npm install if ci fails
        npm ci || npm install
      
    - name: Fix CSS issues
      run: |
        # Check if globals.css has font-poppins and replace it with font-sans if needed
        if grep -q "font-poppins" src/app/globals.css; then
          sed -i 's/font-poppins/font-sans/g' src/app/globals.css
          echo "Fixed font-poppins references in globals.css"
        fi
    
    - name: Build
      run: |
        # Install required dependencies
        npm install qrcode.react@latest react-syntax-highlighter@latest --save
        
        # Run the build
        npm run build
      env:
        CI: false # Prevents build from failing on warnings
        NEXT_PUBLIC_APP_VERSION: ${{ github.ref_type == 'tag' && github.ref_name || 'development' }}
        NEXT_PUBLIC_COMMIT_SHA: ${{ github.sha }}
    
    - name: Run tests
      run: |
        if [ -f package.json ] && grep -q '"test":' package.json; then
          npm test
        else
          echo "No tests specified"
        fi
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-output
        path: .next/
        retention-days: 7

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: ${{ github.ref_name == 'main' || startsWith(github.ref, 'refs/tags/v') }}
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-output
        path: .next/
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}
    
    - name: Extract version
      id: extract_version
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        else
          VERSION=latest
        fi
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "TIMESTAMP=$(date +%Y%m%d%H%M%S)" >> $GITHUB_OUTPUT
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: |
          halalchain/marketplace:latest
          halalchain/marketplace:${{ steps.extract_version.outputs.VERSION }}
          halalchain/marketplace:${{ github.sha }}
        build-args: |
          APP_VERSION=${{ steps.extract_version.outputs.VERSION }}
          BUILD_TIMESTAMP=${{ steps.extract_version.outputs.TIMESTAMP }}
        cache-from: type=registry,ref=halalchain/marketplace:latest
        cache-to: type=inline
    
    - name: Deploy to production
      run: |
        echo "Deploying version ${{ steps.extract_version.outputs.VERSION }} to production server..."
        
        # Set up SSH for deployment
        mkdir -p ~/.ssh
        echo "${{ secrets.DEPLOY_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.DEPLOY_HOST }} >> ~/.ssh/known_hosts
        
        # Deploy using SSH and Docker with improved error handling
        ssh -o StrictHostKeyChecking=accept-new ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} "cd ${{ secrets.DEPLOY_PATH }} && \
          docker-compose pull && \
          docker-compose up -d && \
          echo 'Deployment completed successfully!'" || {
            echo "::error::Deployment failed. Check SSH connection and server status."
            exit 1
          }
        
        echo "Deployment complete!"
      if: ${{ github.ref_type == 'tag' || github.ref == 'refs/heads/main' }}
      env:
        DEPLOY_VERSION: ${{ steps.extract_version.outputs.VERSION }}

  notify:
    needs: deploy
    runs-on: ubuntu-latest
    
    steps:
    - name: Extract version info
      id: version_info
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
          IS_RELEASE=true
        else
          VERSION="development build"
          IS_RELEASE=false
        fi
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "IS_RELEASE=$IS_RELEASE" >> $GITHUB_OUTPUT
    
    - name: Send Slack notification
      uses: slackapi/slack-github-action@v1.24.0
      with:
        payload: |
          {
            "text": "New deployment completed!",
            "blocks": [
              {
                "type": "header",
                "text": {
                  "type": "plain_text",
                  "text": "âœ… Deployment Successful",
                  "emoji": true
                }
              },
              {
                "type": "section",
                "fields": [
                  {
                    "type": "mrkdwn",
                    "text": "*Project:*\nHalalChain Marketplace"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Version:*\n${{ steps.version_info.outputs.VERSION }}"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Deployed by:*\n${{ github.actor }}"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Environment:*\nProduction"
                  }
                ]
              },
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "ðŸš€ <https://halal-chain.com|View Live Site> | <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Workflow Run>"
                }
              }
            ]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
      if: ${{ success() && vars.SLACK_WEBHOOK_URL != '' }}
    
    - name: Send email notification for releases
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: ${{ secrets.MAIL_SERVER }}
        server_port: ${{ secrets.MAIL_PORT }}
        username: ${{ secrets.MAIL_USERNAME }}
        password: ${{ secrets.MAIL_PASSWORD }}
        subject: "ðŸš€ HalalChain Marketplace ${{ steps.version_info.outputs.VERSION }} Released"
        body: |
          HalalChain Marketplace ${{ steps.version_info.outputs.VERSION }} has been successfully deployed to production.
          
          Release Notes:
          - Added support for Australia, Dubai, MENA, GCC, and EU regions
          - Enhanced Portal Section with Extensions Marketplace
          - Added Neural Interface and Quantum Security features
          - Improved user experience with interactive components
          - Updated deployment pipeline for better reliability
          
          Deployment Details:
          - Version: ${{ steps.version_info.outputs.VERSION }}
          - Commit: ${{ github.sha }}
          - Deployed by: ${{ github.actor }}
          - Deployment Time: ${{ steps.extract_version.outputs.TIMESTAMP }}
          
          Visit the site: https://halal-chain.com
          
          Thank you,
          HalalChain DevOps Team
        to: ${{ secrets.NOTIFICATION_EMAIL }}
        from: HalalChain DevOps <${{ secrets.MAIL_FROM }}>
      if: ${{ steps.version_info.outputs.IS_RELEASE == 'true' && vars.MAIL_SERVER != '' }}
        
    - name: Update deployment status
      run: |
        echo "Updating deployment status..."
        echo "HalalChain Marketplace ${{ steps.version_info.outputs.VERSION }} deployed successfully with Extensions Marketplace and Portal enhancements."
        echo "Features: Regional Support (Australia, Dubai, MENA, GCC, EU), Neural Interfaces, Quantum Security, AR/VR Training, AI Agents"